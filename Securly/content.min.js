///////////////////////////////
//    Youtube Content File   //
///////////////////////////////

// This file is run on Youtube every time you load it with this extension loaded.
// For some reason, it hooks a function for on window scroll?



// Big Brother is watching.



////// Begin Code //////

// Connects to the main chunk of the extension
var port = chrome.runtime.connect({
    name: "yt"
});

// On window load...
function onWindowLoad() {
    // Registers its onscroll event, for some reason...
    window.onscroll = function() {
        onWindowScroll()
    }, window.youtubeLastCheck = null, sendOptionsRequest();
    // Checks if Youtube is running in an embed
    let e = document.documentElement.innerHTML.indexOf("ytp-embed") >= 0;
    // If the video is embedded
    if (e) {
        // Grab the video ID (n), the channel ID (t) 
        let n = null,
            t = null,
            o = /\/watch\?v=([a-zA-Z0-9-_]{1,})">/,
            d = document.documentElement.innerHTML.match(o);

        2 == d.length && (n = d[1]);

        let i = /\/channel\/([a-zA-Z0-9-_]{1,})"/;

        2 == (d = document.documentElement.innerHTML.match(i)).length && (t = d[1]);
        // Defines an object that is returned at the end of the function
        let l = {
            channelId: t,
            videoId: n,
            category: null,
            embedded: e
        };
        // Send off the data as long as the channelID and the videoID aren't null
        if (null != l.channelId || null != l.videoId) return sendData(l), !0
    }
    if (-1 == document.documentElement.innerHTML.indexOf('window["ytInitialPlayerResponse"] = null')) {
        // Send off the data AFTER the page loads.
        sendData(fetchPageInfo(!0, document.documentElement.innerHTML))
    }
    if (document.documentElement.innerHTML.indexOf('itemprop="channelId"') > -1) {
        // If the page doesn't have a channel ID, fetch and return the page info WITHOUT 
        sendData(fetchPageInfo(!1))
    }

    // Gathers more data about the youtube video you're watching
    var n = document.title.toString(),
        t = document.querySelector("title");
    (new MutationObserver(function(e) {
        e.some(function(e) {
            var t = e.target.textContent.toString();
            // Such regex. Much wow.
            if ((t = (t = t.replace(/^\([0-9]{0,}\)\s/, "")).replace(/ +/g, " ")) != n) return n = t, -1 == document.URL.indexOf("results?search_query") && location.reload(), !0
        })
    // IDK what this does
    }).observe(t, {
        subtree: !0,
        characterData: !0,
        childList: !0
    }), null != document.querySelector("ytd-browse")) && (window.ytdBrowse = document.querySelector("ytd-browse"), window.lastUpdateBrowse = null, new MutationObserver(function(e) {
        e.some(function() {
            if (null == window.lastUpdateBrowse || Math.floor(Date.now() / 1e3) - window.lastUpdateBrowse > 5) {
                return window.lastUpdateBrowse = Math.floor(Date.now() / 1e3), sendData(fetchPageInfo(!1)), processActions(window.lastResponse), !0
            }
        })
    }).observe(ytdBrowse, {
        subtree: !0,
        characterData: !0,
        childList: !0
    }))
}


// This function literally just fetches data about the page you're on
function fetchPageInfo(e, n = "") {
    if (e) {
        let e = n.indexOf("var ytInitialPlayerResponse = ") + 30,
            i = n.indexOf("};", e) + 1 - e;
        var t = null,
            o = null,
            d = null;
        let l = n.indexOf("ytp-embed") >= 0;
        try {
            let l = JSON.parse(n.substr(e, i));
            t = l.videoDetails.channelId, o = l.videoDetails.videoId, d = l.microformat.playerMicroformatRenderer.category
        } catch (e) {}
        return {
            channelId: t,
            videoId: o,
            category: d,
            embedded: l
        }
    }
    if (!1 === e && null != document.querySelector("meta[itemprop='channelId']")) {
        return {
            channelId: document.querySelector("meta[itemprop='channelId']").getAttribute("content"),
            videoId: null,
            category: null,
            embedded: n.indexOf("ytp-embed") >= 0
        }
    }
}

// The sendData function that sends stuff about the youtube video you're watching back to Big Brother Securly
function sendData(e) {
    // Whoosh!
    port.postMessage({
        action: "getSourceYoutube",
        channelId: e.channelId,
        videoId: e.videoId,
        category: e.category,
        embedded: e.embedded
    })
}

// Literally just sends a message. Much effort, such wow!
function sendOptionsRequest() {
    // Whoosh!
    port.postMessage({
        action: "getYoutubeOptions"
    })
}

// Hides the comments, thumbnails, sidebar and recommended on your Youtube video, just because THEY can.
function processActions(e) {
    window.lastResponse != e && (window.lastResponse = e),
    e.hideComments && hideComment(), 
    e.hideThumbnails && hideThumbnails(), 
    e.hideSidebar && hideSidebar(), 
    e.hideRecommended && hideRecommended(), 
    void 0 !== e.action && "deny" === e.action && (self.location = e.url)
}

// Literally just hides comments.
function hideComment() {
    null !== document.querySelector("ytd-comments") && document.querySelector("ytd-comments").remove()
}

// Literally just removes thumbnails.
function hideThumbnails() {
    [...document.querySelectorAll("ytd-thumbnail")].forEach(e => {
        e.remove()
    }), [...document.querySelectorAll("ytd-playlist-thumbnail")].forEach(e => {
        e.remove()
    })
}

// Literally just hides the sidebar
function hideSidebar() {
    null !== document.querySelector("div[id='related']") && document.querySelector("div[id='related']").remove()
}

// I think this is supposed to hide the reccomended, but...
function hideRecommended() {
    // But there's nothing here!
}

// On window scroll, run ProcessActions()
function onWindowScroll() {
    processActions(window.lastResponse)
}

// I don't know why this is required, but okay, sure...
function callWindowLoadWithTimeOut() {
    setTimeout(onWindowLoad, 2e3)
}

// Listen for messages from Big Brother Securly
port.onMessage.addListener(function(e) {
    processActions(e)
}), 


// Generic stuff (although it CAN be read through some strategic haxing using a bookmarklet or the inspector console)
window.lastResponse = null, 
window.youtubeLastCheck = null, 
window.addEventListener ? 
window.addEventListener("load", callWindowLoadWithTimeOut, !1) : 
window.attachEvent && 
window.attachEvent("onload", callWindowLoadWithTimeOut);